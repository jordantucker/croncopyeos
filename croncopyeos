#!/usr/bin/env python

import os, sys, shutil, glob, subprocess, re, logging, time
from datetime import datetime
from glob import glob

user = os.environ['USER']
home = os.path.expanduser('~')

scratch_dir = '/uscmst1b_scratch/lpc1/3DayLifetime/%s' % user

source_user = 'tucker'
source_mail = 'jordantucker@gmail.com'
source_list_dir = '/uscms/home/%s/public/croncopyeos/%s' % (source_user, user)
source_dir_base = '/store/user/%s/' % source_user

dest_dir_base = '/store/user/%s/croncopyeos/' % user

eos_url = 'root://cmseos.fnal.gov/'

my_dir = os.path.join(home, '.croncopyeos')
script_path = os.path.join(my_dir, 'croncopyeos')

lock_fn = os.path.join(my_dir, 'lock')
max_lock_count = 5

log_dir = os.path.join(my_dir, 'logs')
log_level_fn = os.path.join(source_list_dir, '.loglevel')
log_level = logging.INFO if not os.path.exists(log_level_fn) else int(open(log_level_fn).read())
log_tag = time.asctime()
logs_to_keep = 100

want_mail_fn = os.path.join(source_list_dir, '.wantmail')
want_mail = not os.path.exists(want_mail_fn) or not open(want_mail_fn).read().lower().startswith('n')

run_every = 30 # minutes

####

def popen(cmd, shell=False):
    if type(cmd) == str:
        cmd = cmd.split()
    return subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=shell)

def system(cmd):
    if type(cmd) == str:
        cmd = cmd.split()
    return subprocess.call(cmd, stdout=open(os.devnull, 'w'), stderr=subprocess.STDOUT) == 0
    
def send_mail(body):
    if not want_mail:
        return
    subject = 'croncopyeos %s -> %s' % (source_user, user)
    subprocess.Popen(['mail', '-s', subject, source_mail], stdin=subprocess.PIPE).communicate(body)

def hostname():
    return popen('hostname').communicate()[0].strip()

def eos_quota():
    x = popen('eos root://cmseos.fnal.gov quota').communicate()[0].split('\n')
    for i, line in enumerate(x):
        if user in line:
            return x[i-1] + '\n' + line
    return "eos quota command didn't work or didn't find user %s" % user

def eos_exists(fn):
    return system('eos %s ls %s' % (eos_url, fn))

def eos_mkdir(fn):
    dn = os.path.dirname(fn)
    if eos_exists(dn):
        return True
    return system('eos %s mkdir -p %s' % (eos_url, dn))

def eos_cp(src, dst):
    return system('xrdcp -s %s%s %s%s' % (eos_url, src, eos_url, dst))

def eos_rm(fn):
    return system('eos %s rm %s' % (eos_url, fn))

def eos_md5sum(fn):
    cmd = 'xrdcp -s %s%s -' % (eos_url, fn)
    cmd2 = ('md5sum',)
    p  = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    p2 = subprocess.Popen(('md5sum',), stdin=p.stdout, stdout=subprocess.PIPE)
    p.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
    return p2.communicate()[0].split()[0]

class cwd_sentry(object):
    def __enter__(self):
        self.cwd = os.getcwd()
        return self.cwd
    def __exit__(self, the_type, value, traceback):
        os.chdir(self.cwd)

class callcounted(object):
    # http://stackoverflow.com/questions/812477/how-many-times-was-logging-error-called
    def __init__(self, method):
        self.method = method
        self.counter = 0
    def __call__(self, *args, **kwargs):
        self.counter += 1
        return self.method(*args, **kwargs)

####

def setup_dirs():
    for d in my_dir, log_dir:
        if not os.path.isdir(d):
            os.mkdir(d)
            os.chmod(d, 0755)

def lock_count():
    if not os.path.isfile(lock_fn):
        return 0
    else:
        return int(open(lock_fn).read())

def take_lock():
    count = lock_count() + 1
    open(lock_fn, 'wt').write(str(count))
    return count

def release_lock():
    try:
        os.remove(lock_fn)
    except OSError:
        pass

def check_lock():
    # if we are still running or crashed last time without cleaning up
    # the lock, die immediately. If this is the max_lock_count-th time
    # in a row, log and die.
    c = take_lock()
    if c > 1:
        logging.basicConfig(filename=os.path.join(log_dir, 'log.lock'), format='%(levelname)s %(asctime)s %(message)s')
        logging.error('already locked: count = %i' % c)
        return False
    return True

def setup_log():
    # rotate logs
    fn_fmt = os.path.join(log_dir, 'log.%i')
    for i in xrange(logs_to_keep-1, -1, -1):
        if os.path.isfile(fn_fmt % i):
            shutil.move(fn_fmt % i, fn_fmt % (i+1))

    logging.basicConfig(filename=fn_fmt % 0,
                        format='%(levelname)s %(asctime)s %(message)s',
                        level=log_level)
    logging.warning = callcounted(logging.warning)
    logging.error   = callcounted(logging.error)
    logging.info('Log tag: %s' % log_tag)

def install_script():
    if sys.argv[0] != script_path:
        shutil.copy2(sys.argv[0], script_path)
        os.chmod(script_path, 0755)
        logging.debug('script installed at %s' % script_path)
    else:
        logging.debug('script already installed at %s' % script_path)

def setup_crontab():
    hn = hostname()
    crontab = ''
    p = popen('crontab -l')
    r = p.communicate()
    if p.returncode == 0:
        crontab += r[0]
    if script_path in crontab:
        logging.debug('crontab already installed on %s' % hn)
        return

    crontab = crontab.strip()
    if crontab:
        crontab = '\n'.join(x.strip() for x in crontab.split('\n') if x.strip()) + '\n'
    crontab += '*/%i * * * * %s\n'  % (run_every, script_path)

    p = popen('crontab -')
    p.stdin.write(crontab)
    p.communicate()
    if p.returncode != 0:
        logging.error('could not install crontab on %s' % hn)

def setup():
    setup_dirs()
    if not check_lock():
        return False
    setup_log()
    install_script()
    setup_crontab()
    logging.info('hostname: ' + hostname())
    logging.info('eos quota:\n' + eos_quota())
    return True

def finish():
    release_lock()

####

def do_merge(first_line, steering_lines):
    for_mail = []

    first_line = first_line.split()
    if len(first_line) != 3 or not first_line[1].startswith('CMSSW') or not first_line[2].endswith('.root'):
        logging.warning('bad merge steering')
    else:
        cmssw_version, relative_dest_fn = first_line[1:]
        dest_fn = os.path.join(dest_dir_base, relative_dest_fn)
        input_fns = []
        for line in steering_lines:
            line = line.replace('/eos/uscms', '')
            if not line.startswith(source_dir_base) or not line.endswith('.root'):
                logging.warning('bad line: %r', line)
                continue
            input_fns.append(eos_url + line)
        if not input_fns:
            logging.error('no input fns?')
            return

        if eos_exists(dest_fn):
            logging.debug('%s already exists, skipping', dest_fn)
            return

        if not eos_mkdir(dest_fn):
            logging.error('problem with mkdir %s', dest_fn)
            return

        with cwd_sentry() as old_cwd:
            os.chdir(scratch_dir)
            cmssw_dir = 'croncopyeos_%s_%s' % (cmssw_version, time.strftime('%Y%m%d%H%M'))
            if os.path.isdir(cmssw_dir):
                logging.error('cmssw dir %s already exists?' % cmssw_dir)

            cmd = ['bash', '-c', 'source /cvmfs/cms.cern.ch/cmsset_default.sh && scram project -n %(cmssw_dir)s CMSSW %(cmssw_version)s' % locals()]
            if not system(cmd):
                logging.error('problem setting up CMSSW %s' % cmssw_version)
                return

            os.chdir(os.path.join(scratch_dir, cmssw_dir, 'src'))
            open('temp.py', 'wt').write('''
import FWCore.ParameterSet.Config as cms
process = cms.Process('Merge')
process.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(-1))
process.source = cms.Source('PoolSource', fileNames = cms.untracked.vstring(*%(input_fns)r))
process.load('FWCore.MessageLogger.MessageLogger_cfi')
process.MessageLogger.cerr.FwkReport.reportEvery = 1000000
process.out = cms.OutputModule('PoolOutputModule', fileName = cms.untracked.string('temp.root'))
process.outp = cms.EndPath(process.out)
process.source.inputCommands = cms.untracked.vstring('keep *', 'drop *_MEtoEDMConverter_*_*')
process.out.outputCommands = cms.untracked.vstring('keep *', 'drop LumiDetails_lumiProducer_*_*', 'drop LumiSummary_lumiProducer_*_*', 'drop RunSummary_lumiProducer_*_*')
process.out.dropMetaData = cms.untracked.string('ALL')
''' % locals())
            cmd = ['bash', '-c', 'source /cvmfs/cms.cern.ch/cmsset_default.sh && eval `scramv1 runtime -sh` && cmsRun temp.py']
            p = popen(cmd)
            result = p.communicate()

            if p.returncode != 0 or not os.path.isfile('temp.root'):
                logging.error('problem running merge job:\n' + result[0])
                return

            cmd = ['bash', '-c', 'source /cvmfs/cms.cern.ch/cmsset_default.sh && eval `scramv1 runtime -sh` && edmEventSize -v temp.root']
            evsz = popen(cmd).communicate()[0].split('\n')
            events_line = [l for l in evsz if 'Events' in l]
            events_line = 'problem?' if not events_line else events_line[0]
            logging.debug('edmEventSize info:\n' + '\n'.join(evsz[:10]))

            if not system('xrdcp -s temp.root %s%s' % (eos_url, dest_fn)):
                logging.error('problem with xrdcp')
            else:
                for_mail.append(('merge', dest_fn, events_line))
                logging.debug('success!')

            os.chdir(scratch_dir)
            shutil.rmtree(cmssw_dir)

    return for_mail

def do_delete(first_line, steering_lines):
    for_mail = []
    for line in steering_lines:
        line = line.replace('/eos/uscms', '')
        if not line.startswith(dest_dir_base) or not line.endswith('.root'):
            logging.warning('bad line: %r', line)

        if not eos_exists(dest_fn):
            logging.warning("doesn't exist: %s", dest_fn)

        if not eos_rm(dest_fn):
            logging.error('rm failed: %s', dest_fn)

        for_mail.append(('delete', dest_fn))

    return for_mail

def parse_copy(steering_lines):
    copy_line_re = re.compile(r'([0-9A-Fa-f]+)\s+(.*%s.*)' % source_dir_base)
    ret = []
    for line in steering_lines:
        mo = copy_line_re.search(line)
        if not mo:
            ret.append((line, None))
        else:
            md5sum, source_fn = mo.groups()
            source_fn = source_fn.strip().replace('/eos/uscms', '')
            ret.append((line, (md5sum, source_fn)))
    return ret

def do_copy(first_line, steering_lines):
    for_mail = []
    for line, mo in parse_copy(steering_lines):
        if mo is None:
            logging.warning('bad line: %r', line)
            continue

        md5sum, source_fn = mo
        logging.debug('md5sum %s fn %s' % (md5sum, source_fn))

        if not source_fn.startswith(source_dir_base):
            logging.warning('dunno how to handle it, does not start with %s', source_dir_base)
            continue

        dest_fn = source_fn.replace(source_dir_base, dest_dir_base)
        logging.debug('%s -> %s', source_fn, dest_fn)

        if eos_exists(dest_fn):
            logging.debug('%s already exists, skipping', dest_fn)
            continue

        if not eos_mkdir(dest_fn):
            logging.error('problem with mkdir %s', dest_fn)
            continue

        if not eos_cp(source_fn, dest_fn):
            logging.error('problem with copy')

        new_md5sum = eos_md5sum(dest_fn)
        if new_md5sum != md5sum:
            logging.error('bad md5sum: old = %s new = %s', md5sum, new_md5sum)
            if not eos_rm(dest_fn):
                logging.error('and could not remove fn %s', dest_fn)
        else:
            for_mail.append(('copy', source_fn))
            logging.debug('success!')

    return for_mail

def main():
    if not setup():
        return

    # look for steering files in source_list_dir.
    steering_fns = [x for x in glob(os.path.join(source_list_dir, '*')) if os.path.isfile(x)]
    if not steering_fns:
        logging.info('no steering fns in %s', source_list_dir)

    for_mail = []

    for steering_fn in steering_fns:
        msg = 'steering fn %s: ' % steering_fn
        steering_lines = [l.strip() for l in open(steering_fn).readlines() if l.strip()]
        if not steering_lines:
            logging.info(msg + 'empty file?')
            continue

        first_line = steering_lines.pop(0)
        logging.debug('%s first line: %r with %i following lines', steering_fn, first_line, len(steering_lines))

        # if the first line starts with "merge", then run a CMSSW
        # merge job with the supplied parameters.
        if first_line.startswith('merge'):
            logging.info(msg + 'merge job: %s with %i lines', first_line, len(steering_lines))
            ret = do_merge(first_line, steering_lines)
            if ret:
                for_mail.extend(ret)

        # "delete" lets the remote operator clean up. can only delete
        # files in our dir on eos.
        elif first_line.startswith('delete'):
            logging.info(msg + 'delete job: %i lines', len(steering_lines))
            ret = do_delete(first_line, steering_lines)
            if ret:
                for_mail.extend(ret)

        # else, the file must start with "copy" and consist of lines
        # in md5sum format: copy the files to our dest and read them
        # back and check the md5sum.
        elif first_line.startswith('copy'):
            logging.info(msg + 'copy job: %i lines' % len(steering_lines))
            ret = do_copy(first_line, steering_lines)
            if ret:
                for_mail.extend(ret)

        else:
            logging.error('dunno how to handle this steering file with first line %s', first_line)

    msg  = '%i successful operations; %i warnings and %i errors.' % (len(for_mail), logging.warning.counter, logging.error.counter)
    logging.info(msg)

    if for_mail or logging.warning.counter or logging.error.counter:
        mail  = 'Log tag: ' + log_tag + '\n'
        mail += msg + '\nOperations:\n'
        mail += '\n'.join([' '.join(x) for x in for_mail])
        send_mail(mail)
        
    finish()

if __name__ == '__main__':
    try:
        main()
    except:
        release_lock()
        # don't rely on logging already being set up if there was an
        # exception before we got to that--of course log_dir might not
        # be writeable...
        try:
            logging.basicConfig(filename=os.path.join(log_dir, 'log.exceptions'), format='%(asctime)s %(message)s')
            logging.exception('unhandled exception:')
        except IOError:
            pass
